AWSTemplateFormatVersion: '2010-09-09'
Description: 'IMC Backend Quickstart -- VirtualOption1 (Please do not remove). (qs-1qtb0iudq)'
Parameters:
  EdgeInstanceGreengrassInstanceProfile:
    Type: String
    Description: The instance profile for the EC2 instance running Greengrass 
  GreengrassInstanceType:
    Type: String
    Description: Instance type for for the EC2 instance running Greengrass 
  IoTEndpoint: 
    Type: String
    Description: IoT Endpoint, retrieved from custom resource lambda in workload template
  EdgeDeviceID:
    Type: String
    Description: Name for the edge device. 
  EC2AMI:
    Description: The AMI that the EC2 instances will be using
    Type: AWS::EC2::Image::Id
  IgnitionInstanceType:
    Description: Amazon EC2 instance type for the EC2 instances.
    Type: String
  EC2KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with
      this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  EC2Subnet:
    ConstraintDescription: Must be a valid subnet ID 
    Description: This is the subnit ID where the EC2(s) will be deployed
    Type: AWS::EC2::Subnet::Id
  DeploymentType:
    Description: Type of edge deployment
    Type: String
  EIIgnitionInstanceProfile:
    Description: Profile for the ignition instance that is running at the edge
    Type: String
  EdgeSecGroupResourceGroupID:
    Description: This is the group id for the security group for the edge instance
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
  DeviceBucketRes:
    Description: Information for the device bucket 
    Type: String
  AMCIncomingRes:
    Description: Reference to the Assest Model Incoming Resource
    Type: String
  AMCConvertLambdaResArn:
    Description: ARN for the Asset Model Converter Lambda
    Type: String
  AMCIncomingResArn:
    Description: ARN for the Assest Model Incoming Resource
    Type: String
  RestAPIId:
    Description: ID for the Rest API
    Type: String
  IMCBucketArn:
    Description: ARN of the projects IMC Bucket
    Type: String
  QSS3KeyPrefix: 
    Description: Quickstart key prefix for S3 Quickstart bucket
    Type: String
  LambdaZipsBucket:
    Description: Bucket location of the project zip files
    Type: String
  IoTTopicRuleRoleArn:
    Description: ARN for the projects IoT Topic rule 
    Type: String
  KinesisDelRoleArn:
    Description: ARN of the IAM role for Kinesis Delivery
    Type: String
  AZ:
    Description: AZ to launch EC2 instances into
    Type: String

Resources:
  mqttProcessLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      
  mqttProcessLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role:
        Fn::GetAtt:
          - mqttProcessLambdaRole
          - Arn
      Handler: mqttdataprocess.handler
      Timeout: 120
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/MQTTDataProcess/mqttdataprocess.js.zip'
      Description: Invoke a function during stack creation.

  AMCIncomingNotificationsResource:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandlerResource
          - Arn
      BucketName: !Ref AMCIncomingRes 
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:*
            LambdaFunctionArn: !Ref AMCConvertLambdaResArn
    DependsOn:
      - AMCAllowBucketNotifications
  
  AMCAllowBucketNotifications:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AMCConvertLambdaResArn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Ref AMCIncomingResArn

  BucketNotificationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  
  BucketNotificationsHandlerRoleDefaultPolicyResource:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: !Ref AMCIncomingResArn
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandlerRoleDefaultPolicyResource
      Roles:
        - Ref: BucketNotificationRole

  BucketNotificationsHandlerResource:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: >-
          exports.handler = (event, context) => {
              // eslint-disable-next-line @typescript-eslint/no-require-imports, import/no-extraneous-dependencies
              const s3 = new (require('aws-sdk').S3)();
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              const https = require('https');
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              const url = require('url');
              log(JSON.stringify(event, undefined, 2));
              const props = event.ResourceProperties;
              if (event.RequestType === 'Delete') {
                  props.NotificationConfiguration = {}; // this is how you clean out notifications
              }
              const req = {
                  Bucket: props.BucketName,
                  NotificationConfiguration: props.NotificationConfiguration,
              };
              return s3.putBucketNotificationConfiguration(req, (err, data) => {
                  log({ err, data });
                  if (err) {
                      return submitResponse('FAILED', err.message + `\nMore information in CloudWatch Log Stream: ${context.logStreamName}`);
                  }
                  else {
                      return submitResponse('SUCCESS');
                  }
              });
              function log(obj) {
                  console.error(event.RequestId, event.StackId, event.LogicalResourceId, obj);
              }
              // tslint:disable-next-line:max-line-length
              // adapted from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule
              // to allow sending an error messge as a reason.
              function submitResponse(responseStatus, reason) {
                  const responseBody = JSON.stringify({
                      Status: responseStatus,
                      Reason: reason || 'See the details in CloudWatch Log Stream: ' + context.logStreamName,
                      PhysicalResourceId: event.PhysicalResourceId || event.LogicalResourceId,
                      StackId: event.StackId,
                      RequestId: event.RequestId,
                      LogicalResourceId: event.LogicalResourceId,
                      NoEcho: false,
                  });
                  log({ responseBody });
                  const parsedUrl = url.parse(event.ResponseURL);
                  const options = {
                      hostname: parsedUrl.hostname,
                      port: 443,
                      path: parsedUrl.path,
                      method: 'PUT',
                      headers: {
                          'content-type': '',
                          'content-length': responseBody.length,
                      },
                  };
                  const request = https.request(options, (r) => {
                      log({ statusCode: r.statusCode, statusMessage: r.statusMessage });
                      context.done();
                  });
                  request.on('error', (error) => {
                      log({ sendError: error });
                      context.done();
                  });
                  request.write(responseBody);
                  request.end();
              }
          };
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationRole
          - Arn
      Runtime: nodejs14.x
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandlerRoleDefaultPolicyResource

  KinesisDeliveryStreamMQTT:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Ref IMCBucketArn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 50
        CompressionFormat: UNCOMPRESSED
        Prefix: mqtt/
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt mqttProcessLambda.Arn 
              Type: Lambda
        RoleARN: !Ref KinesisDelRoleArn
  DeviceDataRuleMQTT:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        RuleDisabled: false
        Sql: SELECT * FROM 'spBv1.0/AWS Smart Factory/DDATA/#'
        Actions:
          - Firehose:
              DeliveryStreamName:
                Ref: KinesisDeliveryStreamMQTT
              RoleArn: !Ref IoTTopicRuleRoleArn

  EdgeInstanceGreengrassResource:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Sub '${AZ}'
      IamInstanceProfile:
        Ref: EdgeInstanceGreengrassInstanceProfile
      ImageId: !Ref 'EC2AMI'
      InstanceType: !Ref 'GreengrassInstanceType'
      KeyName: !Ref 'EC2KeyPairName'
      SecurityGroupIds: !Ref EdgeSecGroupResourceGroupID
      SubnetId: !Ref 'EC2Subnet'
      Tags:
        - Key: Name
          # Value: !Sub '${DeploymentType}/${DeploymentOption}/Greengrass' 
          Value: !Sub '${DeploymentType}/Option1/Greengrass' 
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - >-
                #!/bin/bash

                                set -ex

                                apt update -y
                                # apt upgrade -y
                                apt install -y awscli unzip fail2ban

                                addgroup --system ggc_group
                                adduser --system --ingroup ggc_group ggc_user
                                mkdir -p /greengrass
                                mkdir -p /greengrass/certs
                                cd /greengrass/certs/
                                wget -O root.ca.pem https://www.amazontrust.com/repository/AmazonRootCA1.pem
                                wget --inet4-only -O aws-iot-greengrass-keyring.deb https://d1onfpft10uf5o.cloudfront.net/greengrass-apt/downloads/aws-iot-greengrass-keyring.deb
                                dpkg -i aws-iot-greengrass-keyring.deb
                                wget --inet4-only -O aws-iot-greengrass-keyring.deb https://d1onfpft10uf5o.cloudfront.net/greengrass-apt/downloads/aws-iot-greengrass-keyring.deb
                                dpkg -i aws-iot-greengrass-keyring.deb
                                echo "deb https://dnw9lb6lzp2d8.cloudfront.net stable main" | tee /etc/apt/sources.list.d/greengrass.list
                                apt update -y
                                apt install aws-iot-greengrass-core unzip python3.7 openjdk-8-jre -y
                                apt-cache madison openjdk-8-jdk
                                wget https://download.bell-sw.com/java/8u282+8/bellsoft-jdk8u282+8-linux-amd64.deb
                                apt install ./bellsoft-jdk8u282+8-linux-amd64.deb
                                systemctl enable greengrass.service
                                ln -s /usr/bin/java /usr/bin/java8
                                mkdir /var/sitewise 
                                chown ggc_user /var/sitewise
                                chmod 700 /var/sitewise

                                aws s3api get-object --bucket
              - " "
              - Ref: DeviceBucketRes
              - " --key "
              - Ref: EdgeDeviceID
              - /
              - Ref: EdgeDeviceID
              - !Sub | 
                Core.tar.gz group.tar.gz
                                tar -xzvf group.tar.gz -C /greengrass
                                /greengrass/ggc/core/greengrassd start
                                sleep 10
                                wget -O /home/ubuntu/opcclient.der https://${RestAPIId}.execute-api.${AWS::Region}.amazonaws.com/api/deploygg/${EdgeDeviceID}
              - "\n\n                "
  EdgeInstanceIgnitionResource:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Sub '${AZ}'
      IamInstanceProfile: !Ref EIIgnitionInstanceProfile
      ImageId: !Ref EC2AMI
      InstanceType: !Ref IgnitionInstanceType
      KeyName: !Ref EC2KeyPairName
      SecurityGroupIds: !Ref EdgeSecGroupResourceGroupID
      SubnetId: !Ref EC2Subnet
      Tags:
        - Key: Name
          # Value: !Sub '${DeploymentType}/${DeploymentOption}/Ignition'
          Value: !Sub '${DeploymentType}/Option1/Ignition'
      UserData:
        Fn::Base64: !Join 
            - ""
            - - !Sub | 
                #!/bin/bash

                                set -ex

                                apt update -y
                                # apt upgrade -y
                                apt install -y awscli unzip fail2ban

                                # Get Ignition automation files
                                wget -O /home/ubuntu/Ignition-AWS-Kit-MQTT-v4.zip http://files.inductiveautomation.com/aws-imc-kit/Ignition-AWS-Kit-MQTT-v5.zip
                                unzip -o /home/ubuntu/Ignition-AWS-Kit-MQTT-v4.zip -d /home/ubuntu
                                cd /home/ubuntu/Ignition-AWS-Kit-MQTT-v4
                                chmod +x install.sh

                                # Set up certs for running installation script

                                wget https://${RestAPIId}.execute-api.${AWS::Region}.amazonaws.com/api/updateconnectivity/${EdgeDeviceID}/withip/${EdgeInstanceGreengrassResource.PrivateIp}
              - !Sub |
                
                                sleep 10

                                ipaddress=`curl http://169.254.169.254/latest/meta-data/local-ipv4`
                                wget -O /home/ubuntu/groupca.pem https://${RestAPIId}.execute-api.${AWS::Region}.amazonaws.com/api/deployggwithsitewise/${EdgeDeviceID}?ignition-ip=$ipaddress
                                wget -O /home/ubuntu/Ignition-AWS-Kit-MQTT-v4/artifacts/opcua/opcclient.der https://www.amazontrust.com/repository/AmazonRootCA1.pem
                                aws s3api get-object --bucket ${DeviceBucketRes} --key ${EdgeDeviceID}/${EdgeDeviceID}Device.tar.gz group.tar.gz
                                tar -xzvf group.tar.gz -C /home/ubuntu/Ignition-AWS-Kit-MQTT-v4/artifacts
                                mv /home/ubuntu/Ignition-AWS-Kit-MQTT-v4/artifacts/certs/* /home/ubuntu/Ignition-AWS-Kit-MQTT-v4/artifacts/mqtt
                                rmdir /home/ubuntu/Ignition-AWS-Kit-MQTT-v4/artifacts/certs
                                sed -i "s/defaultclient/${EdgeDeviceID}Device/g" /home/ubuntu/Ignition-AWS-Kit-MQTT-v4/artifacts/config.json
                                sed -i "s%abcdefexample-ats.iot.us-east-1.amazonaws.com%${IoTEndpoint}%g" /home/ubuntu/Ignition-AWS-Kit-MQTT-v4/artifacts/config.json
                                python3 /home/ubuntu/Ignition-AWS-Kit-MQTT-v4/scripts/editConfig.py
                                # Run installation
                                ./install.sh

Outputs:
  IgnitionURL:
    Value:
      Fn::Sub: "http://${EdgeInstanceIgnitionResource.PublicIp}:8088"